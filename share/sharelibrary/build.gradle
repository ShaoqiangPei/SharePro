apply plugin: 'com.android.library'

//为jitpack做配置
apply plugin: 'com.github.dcendents.android-maven'
group = 'com.github.ShaoqiangPei'

//android配置  
def config = rootProject.ext.android
//相关库依赖  
def librarys = rootProject.ext.supportDependencies

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        testInstrumentationRunner config.testInstrumentationRunner
        consumerProguardFiles config.consumerProguardFiles
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    //加载短信配置
    loadSmsConfig()

    //==========以下添加是为了让自己的库发布到JitPack上仍能显示注释==================
    // 打包源码jar
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }
    //编译groovy代码时采用 UTF-8
    tasks.withType(GroovyCompile) {
        groovyOptions.encoding = "MacRoman"
    }

    //编译JAVA文件时采用UTF-8
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    task javadoc(type: Javadoc) {
        failOnError false
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }

    // 打包文档jar
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
//==========以上添加是为了让自己的库发布到JitPack上仍能显示注释==================

}

//加载短信配置
def loadSmsConfig(){
    def key="244e915baae1a"
    def secret="b5eb7df4657dbde9b36b673cef463a3e"

    File file=project.rootProject.file('mob_sms.properties')
    if(file.exists()){
        Properties pro = new Properties()
        pro.load(file.newDataInputStream())

        println "===========加载mob_sms.properties配置==========="
        key=pro.getProperty('MOB_APP_KEY')
        secret=pro.getProperty('MOB_APP_SECRET')
    }else{
        print "===========mob_sms.properties配置文件不存在,采用默认key和secret==================="
    }

    //添加mob插件(短信验证)
    apply plugin: 'com.mob.sdk'
    // 在MobSDK的扩展中注册SMSSDK的相关信息
    MobSDK {
        appKey key
        appSecret secret
        spEdition "fp" // 设定MobSDK为隐私协议适配版本
        SMSSDK {}
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation librarys.implementation_support_appcompat
    testImplementation librarys.testImplementation_test_junit
    androidTestImplementation librarys.androidTestImplementation_test_ext_junit
    androidTestImplementation librarys.androidTestImplementation_support_espresso
    api files('libs/open_sdk_r8353806_lite.jar')
    implementation files('libs/activation.jar')
    implementation files('libs/additionnal.jar')
    implementation files('libs/mail.jar')
    //gson
    implementation librarys.implementation_gson
}
